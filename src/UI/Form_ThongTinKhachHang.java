package UI;

import javax.swing.*;

import Entity.ChiTietHoaDon;
import Entity.ComboDoAn;
import Entity.HoaDon;
import Entity.Ve;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;
import java.time.format.TextStyle;
import java.util.Locale;
import java.time.LocalTime; // C·∫ßn import LocalTime

public class Form_ThongTinKhachHang extends JPanel implements ActionListener {
	private static final Color primary = new Color(26, 26, 46);
	private static final Color accent = new Color(233, 69, 96);
	private static final Color highlight = new Color(180, 100, 255);
	private static final Font fontTitle = new Font("Poppins", Font.BOLD, 20);
	private static final Font fontText = new Font("Poppins", Font.PLAIN, 14);

	private JTextField txtName, txtEmail, txtPhone;
	private Runnable onBack;
	private String tenPhim;
	private int thoiLuongPhim;
	private int soGheDaChon;
	private String danhSachGhe;
	private double giaVe; // Ch√∫ √Ω: giaVe ·ªü ƒë√¢y l√† GI√Å C·ª¶A 1 V√â, KH√îNG ph·∫£i t·ªïng ti·ªÅn v√©.
	private List<ComboDoAn> comboDaChon;
	private String gioBatDauStr;
	private Consumer<HoaDon> onPayment;
	private JButton btnPayment;

	public Form_ThongTinKhachHang(String tenPhim, int thoiLuongPhim, int soGheDaChon, String danhSachGhe, double giaVe,
			java.util.List<ComboDoAn> comboDaChon, String gioBatDauStr, Runnable onBack, Consumer<HoaDon> onPayment) {
		this.onBack = onBack;
		this.tenPhim = tenPhim;
		this.thoiLuongPhim = thoiLuongPhim;
		this.soGheDaChon = soGheDaChon;
		this.danhSachGhe = danhSachGhe;
		this.giaVe = giaVe; // Gi√° v√© c∆° b·∫£n
		this.comboDaChon = comboDaChon;
		this.gioBatDauStr = gioBatDauStr;
		this.onPayment = onPayment;

		setLayout(new BorderLayout(30, 30));
		setBackground(primary);
		setBorder(BorderFactory.createEmptyBorder(40, 60, 40, 60));

		JScrollPane scrollPaneCustomer = new JScrollPane(createCustomerFormPanel());
		add(createTicketDetailPanel(), BorderLayout.WEST);
		add(scrollPaneCustomer, BorderLayout.CENTER);
		add(createTopPanel(), BorderLayout.NORTH);
	}

	// === C√°c ph∆∞∆°ng th·ª©c UI (Gi·ªØ nguy√™n) ===
	private JPanel createTopPanel() {
		// ... (Code t·∫°o header gi·ªØ nguy√™n) ...
		JPanel topPanel = new JPanel(new BorderLayout());
		topPanel.setBackground(primary);
		topPanel.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));

		JButton btnBack = new JButton("Quay l·∫°i");
		btnBack.setBackground(highlight);
		btnBack.setForeground(Color.WHITE);
		btnBack.setFont(new Font("Poppins", Font.BOLD, 14));
		btnBack.setFocusPainted(false);
		btnBack.setBorder(BorderFactory.createEmptyBorder(8, 15, 8, 15));
		btnBack.setCursor(new Cursor(Cursor.HAND_CURSOR));

		btnBack.addActionListener(e -> {
			if (onBack != null)
				onBack.run();
		});

		topPanel.add(btnBack, BorderLayout.WEST);

		JLabel lblHeader = new JLabel("X√ÅC NH·∫¨N V√â", SwingConstants.CENTER);
		lblHeader.setForeground(Color.WHITE);
		lblHeader.setFont(new Font("Poppins", Font.BOLD, 22));
		topPanel.add(lblHeader, BorderLayout.CENTER);

		return topPanel;
	}

	private JPanel createTicketDetailPanel() {
		// ... (Code t·∫°o panel chi ti·∫øt v√© gi·ªØ nguy√™n) ...
		JPanel panel = new JPanel();
		panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
		panel.setBackground(new Color(20, 25, 65));
		panel.setBorder(BorderFactory.createEmptyBorder(20, 30, 20, 30));
		panel.setPreferredSize(new Dimension(350, 0));

		JLabel lblTitle = new JLabel("CHI TI·∫æT V√â");
		lblTitle.setFont(fontTitle);
		lblTitle.setForeground(Color.WHITE);
		lblTitle.setAlignmentX(Component.LEFT_ALIGNMENT);
		panel.add(lblTitle);
		panel.add(Box.createVerticalStrut(10));

		java.time.LocalDate today = java.time.LocalDate.now();
        // Hi·ªÉn th·ªã th·ª© b·∫±ng ti·∫øng Vi·ªát
		String dayOfWeek = today.getDayOfWeek().getDisplayName(TextStyle.FULL, new Locale("vi", "VN"));
		String dateStr = dayOfWeek + ", " + today;
		
		java.time.LocalTime gioBatDau = java.time.LocalTime.parse(gioBatDauStr);
		java.time.LocalTime gioKetThuc = gioBatDau.plusMinutes(thoiLuongPhim);

		// Ch√∫ √Ω: giaVe * soGheDaChon l√† t·ªïng ti·ªÅn v√©
		double tongTienVe = giaVe * soGheDaChon; 
		double tongTienCombo = comboDaChon.stream().mapToDouble(c -> c.getGia() * c.getSoLuong()).sum();
		double tongTien = tongTienVe + tongTienCombo;

		DecimalFormat df = new DecimalFormat("#,### ƒë");

		JLabel lblMovie = createLabel("Movie: " + tenPhim);
		JLabel lblAddress = createLabel("Address: 242 Nguy·ªÖn VƒÉn L∆∞·ª£ng, G√≤ V·∫•p");
		JLabel lblDate = createLabel("Date: " + dateStr);
		JLabel lblTickets = createLabel("Tickets: " + soGheDaChon);
		JLabel lblSeats = createLabel("Seats: " + danhSachGhe);
		JLabel lblTime = createLabel("Time: " + gioBatDau + " - " + gioKetThuc);
		JLabel lblScreen = createLabel("Screen: 3");

		String comboText = comboDaChon.isEmpty() ? "None"
				: comboDaChon.stream().filter(c -> c.getSoLuong() > 0).map(c -> c.getTenCombo() + " x" + c.getSoLuong())
						.reduce((a, b) -> a + ", " + b).orElse("Kh√¥ng c√≥");
		JLabel lblCombo = createLabel("Combo: " + comboText);
		JLabel lblTotal = createLabel("Total: " + df.format(tongTien));

		for (JLabel lbl : new JLabel[] { lblMovie, lblAddress, lblDate, lblTickets, lblSeats, lblTime, lblScreen,
				lblCombo, lblTotal }) {
			panel.add(Box.createVerticalStrut(10)); 
			panel.add(lbl);
		}

		panel.add(Box.createVerticalGlue());
		return panel;
	}

	private JPanel createCustomerFormPanel() {
		// ... (Code t·∫°o form kh√°ch h√†ng gi·ªØ nguy√™n) ...
		JPanel panel = new JPanel();
		panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
		panel.setOpaque(false);
		panel.setBorder(BorderFactory.createEmptyBorder(40, 60, 40, 60));

		// üè∑Ô∏è Ti√™u ƒë·ªÅ
		JLabel lblTitle = new JLabel("TH√îNG TIN KH√ÅCH H√ÄNG");
		lblTitle.setFont(new Font("Poppins", Font.BOLD, 24));
		lblTitle.setForeground(Color.WHITE);
		lblTitle.setAlignmentX(Component.CENTER_ALIGNMENT);
		panel.add(lblTitle);
		panel.add(Box.createVerticalStrut(25));

		// üßæ Form nh·∫≠p li·ªáu
		JPanel pnlForm = new JPanel();
		pnlForm.setBackground(primary);
		pnlForm.setLayout(new BoxLayout(pnlForm, BoxLayout.Y_AXIS));
		pnlForm.setOpaque(false);
		pnlForm.setAlignmentX(Component.CENTER_ALIGNMENT);
		pnlForm.setMaximumSize(new Dimension(400, 250));

		// ============ H·ªç t√™n ============
		pnlForm.add(createInputGroup("H·ªç v√† t√™n", txtName = createTextField()));
		pnlForm.add(Box.createVerticalStrut(20));

		// ============ Email ============
		pnlForm.add(createInputGroup("Email", txtEmail = createTextField()));
		pnlForm.add(Box.createVerticalStrut(20));

		// ============ S·ªë ƒëi·ªán tho·∫°i ============
		pnlForm.add(createInputGroup("S·ªë ƒëi·ªán tho·∫°i", txtPhone = createTextField()));
		pnlForm.add(Box.createVerticalStrut(30));

		panel.add(pnlForm);

		// ü™ô N√∫t thanh to√°n
		JPanel pnlButtons = new JPanel(new FlowLayout(FlowLayout.CENTER));
		pnlButtons.setOpaque(false);

		btnPayment = new JButton("Thanh To√°n");
		btnPayment.setPreferredSize(new Dimension(220, 45));
		btnPayment.setBackground(accent);
		btnPayment.setForeground(Color.WHITE);
		btnPayment.setFont(new Font("Poppins", Font.BOLD, 16));
		btnPayment.setCursor(new Cursor(Cursor.HAND_CURSOR));
		btnPayment.setBorder(BorderFactory.createEmptyBorder());
		btnPayment.setFocusPainted(false);

		pnlButtons.add(btnPayment);
		panel.add(pnlButtons);
		btnPayment.addActionListener(this);
		return panel;
	}

	private JPanel createInputGroup(String labelText, JTextField textField) {
		// ... (Code t·∫°o group input gi·ªØ nguy√™n) ...
		JPanel group = new JPanel();
		group.setLayout(new BoxLayout(group, BoxLayout.Y_AXIS));
		group.setOpaque(false);
		group.setAlignmentX(Component.CENTER_ALIGNMENT);

		JLabel lbl = new JLabel(labelText);
		lbl.setFont(new Font("Poppins", Font.BOLD, 14));
		lbl.setForeground(Color.WHITE);
		lbl.setAlignmentX(Component.LEFT_ALIGNMENT);

		textField.setAlignmentX(Component.LEFT_ALIGNMENT);

		group.add(lbl);
		group.add(Box.createVerticalStrut(5)); 
		group.add(textField);
		return group;
	}

	private JTextField createTextField() {
		// ... (Code t·∫°o text field gi·ªØ nguy√™n) ...
		JTextField txt = new JTextField();
		txt.setFont(new Font("Roboto", Font.PLAIN, 14));
		txt.setMaximumSize(new Dimension(400, 35));
		txt.setAlignmentX(Component.LEFT_ALIGNMENT);
		txt.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLineBorder(new Color(180, 180, 180), 1),
				BorderFactory.createEmptyBorder(5, 10, 5, 10)));
		return txt;
	}

	private JLabel createLabel(String text) {
		// ... (Code t·∫°o label gi·ªØ nguy√™n) ...
		JLabel label = new JLabel(text);
		label.setFont(new Font("Poppins", Font.BOLD, 14));
		label.setForeground(Color.WHITE);
		label.setAlignmentX(Component.LEFT_ALIGNMENT); 
		label.setBorder(BorderFactory.createEmptyBorder(0, 5, 5, 0)); 
		return label;
	}

	private List<ChiTietHoaDon> createChiTietHoaDonList() {
		// ... (Code t·∫°o ChiTietHoaDon gi·ªØ nguy√™n) ...
		List<ChiTietHoaDon> chiTietList = new ArrayList<>();

		if (soGheDaChon > 0) {
			// L∆∞u √Ω: giaVe ·ªü ƒë√¢y l√† t·ªïng ti·ªÅn v√© (s·ªë ti·ªÅn ·ª©ng v·ªõi s·ªë gh·∫ø ƒë√£ ch·ªçn)
			// Tuy nhi√™n, logic Entity c·ªßa b·∫°n ƒëang t·∫°o Ve v·ªõi giaVe truy·ªÅn v√†o.
			// N·∫øu giaVe l√† gi√° 1 v√©, th√¨ ƒëo·∫°n code sau c·∫ßn ƒë∆∞·ª£c ki·ªÉm tra l·∫°i logic Entity.
			// T·∫°m th·ªùi, gi·ªØ nguy√™n Ve(giaVe) v√† set soLuong
			Ve veCoBan = new Ve(this.giaVe / this.soGheDaChon); // Gi·∫£ s·ª≠ giaVe l√† t·ªïng ti·ªÅn v√©, chia cho s·ªë l∆∞·ª£ng ƒë·ªÉ l·∫•y gi√° 1 v√©
			ChiTietHoaDon chiTietVe = new ChiTietHoaDon();
			chiTietVe.setVe(veCoBan);
			chiTietVe.setSoLuong(soGheDaChon);
			chiTietList.add(chiTietVe);
		}

		if (comboDaChon != null) {
			for (ComboDoAn combo : comboDaChon) {
				if (combo.getSoLuong() > 0) {
					ChiTietHoaDon chiTietCombo = new ChiTietHoaDon();
					chiTietCombo.setCombo(combo);
					chiTietCombo.setSoLuong(combo.getSoLuong());

					chiTietList.add(chiTietCombo);
				}
			}
		}

		return chiTietList;
	}

	private boolean validateCustomerInfo() {
		// ... (Code ki·ªÉm tra validate gi·ªØ nguy√™n) ...
		String name = txtName.getText().trim();
		String email = txtEmail.getText().trim();
		String phone = txtPhone.getText().trim();

		if (name.isEmpty()) {
			JOptionPane.showMessageDialog(this, "Vui l√≤ng nh·∫≠p h·ªç v√† t√™n.", "L·ªói Th√¥ng Tin", JOptionPane.ERROR_MESSAGE);
			txtName.requestFocus();
			return false;
		}

		if (!email.matches("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$")) {
			JOptionPane.showMessageDialog(this,
					"Email kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng (v√≠ d·ª•: example@gmail.com).", "L·ªói Email",
					JOptionPane.ERROR_MESSAGE);
			txtEmail.requestFocus();
			return false;
		}

		if (!phone.matches("0\\d{9}")) {
			JOptionPane.showMessageDialog(this,
					"S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p 10 ch·ªØ s·ªë, b·∫Øt ƒë·∫ßu b·∫±ng s·ªë 0.", "L·ªói S·ªë ƒêi·ªán Tho·∫°i",
					JOptionPane.ERROR_MESSAGE);
			txtPhone.requestFocus();
			return false;
		}

		return true;
	}
	
    /**
     * H√†m x·ª≠ l√Ω s·ª± ki·ªán cho n√∫t Thanh To√°n.
     * T·∫°o d·ªØ li·ªáu cho Form_ThanhToan v√† chuy·ªÉn m√†n h√¨nh.
     */
	@Override
	public void actionPerformed(ActionEvent e) {
	    Object o = e.getSource();
	    if (o.equals(btnPayment)) {

	        // 1. Ki·ªÉm tra th√¥ng tin kh√°ch h√†ng
	        if (!validateCustomerInfo()) {
	            return;
	        }

	        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);

	        // 2. T√≠nh to√°n T·ªïng ti·ªÅn (giaVe l√† t·ªïng ti·ªÅn v√©)
	        double tongTienVe = this.giaVe * this.soGheDaChon; // S·ª¨A: Gi·∫£ s·ª≠ giaVe ƒë√£ l√† gi√° t·ªïng ti·ªÅn v√©, c·∫ßn ki·ªÉm tra l·∫°i
	        
	        double tongTienCombo = comboDaChon.stream()
	                .mapToDouble(c -> c.getGia() * c.getSoLuong())
	                .sum();
	                
	        // totalAmount = T·ªîNG TI·ªÄN V√â + T·ªîNG TI·ªÄN COMBO
	        double totalAmount = tongTienVe + tongTienCombo; 

	        // 3. Chu·∫©n b·ªã d·ªØ li·ªáu hi·ªÉn th·ªã cho Form_ThanhToan
	        
	        // M√£ V√© Gi·∫£
	        String ticketCode = "UZ" + (int)(Math.random() * 90000 + 10000) + "MBXS1";
	        String qrData = "PAYMENT_INFO|AMOUNT=" + totalAmount + "|CODE=" + ticketCode;

	        // Ng√†y 
	        java.time.LocalDate today = java.time.LocalDate.now();
	        String dateStr = today.getDayOfWeek().getDisplayName(TextStyle.FULL, new Locale("vi", "VN")) + ", " + today.toString();
	        
	        // Gi·ªù (T√≠nh Gi·ªù k·∫øt th√∫c)
	        java.time.LocalTime gioBatDau = java.time.LocalTime.parse(gioBatDauStr);
	        String timeStr = gioBatDauStr + " - " + gioBatDau.plusMinutes(thoiLuongPhim);

	        // Chi ti·∫øt Combo (N·∫øu kh√¥ng c√≥ combo, m·∫∑c ƒë·ªãnh l√† "None")
	        String comboText = comboDaChon.stream().filter(c -> c.getSoLuong() > 0)
	                .map(c -> c.getTenCombo() + " x" + c.getSoLuong())
	                .reduce("None", (a, b) -> a.equals("None") ? b : a + ", " + b);
	        
	        String diaChiRap = "242 Nguy·ªÖn VƒÉn L∆∞·ª£ng, G√≤ V·∫•p,, Th√†nh ph·ªë H·ªì Ch√≠ Minh"; 
	        
	        // 4. Ghi nh·∫≠n H√≥a ƒë∆°n (Gi·∫£ ƒë·ªãnh thanh to√°n th√†nh c√¥ng)
	        HoaDon hoaDon = new HoaDon();
	        hoaDon.setChiTiet(createChiTietHoaDonList());
	        if (onPayment != null) {	
	            onPayment.accept(hoaDon);
	        }

	        // 5. ƒê·ªãnh nghƒ©a h√†nh ƒë·ªông quay l·∫°i (Quay l·∫°i Form_ThongTinKhachHang)
	        Runnable backToInfoForm = () -> {
	            frame.setContentPane(this);
	            frame.revalidate();
	            frame.repaint();
	        };

	        // 6. T·∫†O V√Ä HI·ªÇN TH·ªä FORM_THANHTOAN (10 tham s·ªë)
	        Form_ThanhToan formThanhToan = new Form_ThanhToan(
	            qrData,
	            ticketCode,
	            totalAmount,
	            tenPhim, 
	            danhSachGhe, 
	            dateStr,
	            timeStr,
	            diaChiRap,
	            comboText,
	            backToInfoForm
	        );

	        frame.setContentPane(formThanhToan);
	        frame.revalidate();
	        frame.repaint();
	    }
	}
}